// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StreamTest.proto

package com.example.test.stream.service;

/**
 * Protobuf service {@code com.example.test.stream.service.TestGrpcStream}
 */
public abstract class TestGrpcStream
        implements com.google.protobuf.Service {
    protected TestGrpcStream() {
    }

    public static com.google.protobuf.Service newReflectiveService(
            final Interface impl) {
        return new TestGrpcStream() {
            @java.lang.Override
            public void test(
                    com.google.protobuf.RpcController controller,
                    com.example.test.stream.service.Request request,
                    com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done) {
                impl.test(controller, request, done);
            }

            @java.lang.Override
            public void testStreamRequest(
                    com.google.protobuf.RpcController controller,
                    com.example.test.stream.service.Request request,
                    com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done) {
                impl.testStreamRequest(controller, request, done);
            }

            @java.lang.Override
            public void testStreamResponse(
                    com.google.protobuf.RpcController controller,
                    com.example.test.stream.service.Request request,
                    com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done) {
                impl.testStreamResponse(controller, request, done);
            }

            @java.lang.Override
            public void testStream(
                    com.google.protobuf.RpcController controller,
                    com.example.test.stream.service.Request request,
                    com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done) {
                impl.testStream(controller, request, done);
            }

        };
    }

    public static com.google.protobuf.BlockingService
    newReflectiveBlockingService(final BlockingInterface impl) {
        return new com.google.protobuf.BlockingService() {
            public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }

            public final com.google.protobuf.Message callBlockingMethod(
                    com.google.protobuf.Descriptors.MethodDescriptor method,
                    com.google.protobuf.RpcController controller,
                    com.google.protobuf.Message request)
                    throws com.google.protobuf.ServiceException {
                if (method.getService() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "Service.callBlockingMethod() given method descriptor for " +
                                    "wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return impl.test(controller, (com.example.test.stream.service.Request) request);
                    case 1:
                        return impl.testStreamRequest(controller, (com.example.test.stream.service.Request) request);
                    case 2:
                        return impl.testStreamResponse(controller, (com.example.test.stream.service.Request) request);
                    case 3:
                        return impl.testStream(controller, (com.example.test.stream.service.Request) request);
                    default:
                        throw new java.lang.AssertionError("Can't get here.");
                }
            }

            public final com.google.protobuf.Message
            getRequestPrototype(
                    com.google.protobuf.Descriptors.MethodDescriptor method) {
                if (method.getService() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "Service.getRequestPrototype() given method " +
                                    "descriptor for wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return com.example.test.stream.service.Request.getDefaultInstance();
                    case 1:
                        return com.example.test.stream.service.Request.getDefaultInstance();
                    case 2:
                        return com.example.test.stream.service.Request.getDefaultInstance();
                    case 3:
                        return com.example.test.stream.service.Request.getDefaultInstance();
                    default:
                        throw new java.lang.AssertionError("Can't get here.");
                }
            }

            public final com.google.protobuf.Message
            getResponsePrototype(
                    com.google.protobuf.Descriptors.MethodDescriptor method) {
                if (method.getService() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "Service.getResponsePrototype() given method " +
                                    "descriptor for wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return com.example.test.stream.service.Response.getDefaultInstance();
                    case 1:
                        return com.example.test.stream.service.Response.getDefaultInstance();
                    case 2:
                        return com.example.test.stream.service.Response.getDefaultInstance();
                    case 3:
                        return com.example.test.stream.service.Response.getDefaultInstance();
                    default:
                        throw new java.lang.AssertionError("Can't get here.");
                }
            }

        };
    }

    public static final com.google.protobuf.Descriptors.ServiceDescriptor
    getDescriptor() {
        return com.example.test.stream.service.StreamTest.getDescriptor().getServices().get(0);
    }

    public static Stub newStub(
            com.google.protobuf.RpcChannel channel) {
        return new Stub(channel);
    }

    public static BlockingInterface newBlockingStub(
            com.google.protobuf.BlockingRpcChannel channel) {
        return new BlockingStub(channel);
    }

    /**
     * <pre>
     * *
     * 普通流
     * </pre>
     *
     * <code>rpc test(.com.example.test.stream.service.Request) returns (.com.example.test.stream.service.Response);</code>
     */
    public abstract void test(
            com.google.protobuf.RpcController controller,
            com.example.test.stream.service.Request request,
            com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done);

    /**
     * <pre>
     * *
     * 客户端流
     * </pre>
     *
     * <code>rpc testStreamRequest(stream .com.example.test.stream.service.Request) returns (.com.example.test.stream.service.Response);</code>
     */
    public abstract void testStreamRequest(
            com.google.protobuf.RpcController controller,
            com.example.test.stream.service.Request request,
            com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done);

    /**
     * <pre>
     * *
     * 服务端流
     * </pre>
     *
     * <code>rpc testStreamResponse(.com.example.test.stream.service.Request) returns (stream .com.example.test.stream.service.Response);</code>
     */
    public abstract void testStreamResponse(
            com.google.protobuf.RpcController controller,
            com.example.test.stream.service.Request request,
            com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done);

    /**
     * <pre>
     * *
     * 双向流
     * </pre>
     *
     * <code>rpc testStream(stream .com.example.test.stream.service.Request) returns (stream .com.example.test.stream.service.Response);</code>
     */
    public abstract void testStream(
            com.google.protobuf.RpcController controller,
            com.example.test.stream.service.Request request,
            com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done);

    public final com.google.protobuf.Descriptors.ServiceDescriptor
    getDescriptorForType() {
        return getDescriptor();
    }

    public final void callMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request,
            com.google.protobuf.RpcCallback<
                    com.google.protobuf.Message> done) {
        if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
                    "Service.callMethod() given method descriptor for wrong " +
                            "service type.");
        }
        switch (method.getIndex()) {
            case 0:
                this.test(controller, (com.example.test.stream.service.Request) request,
                        com.google.protobuf.RpcUtil.<com.example.test.stream.service.Response>specializeCallback(
                                done));
                return;
            case 1:
                this.testStreamRequest(controller, (com.example.test.stream.service.Request) request,
                        com.google.protobuf.RpcUtil.<com.example.test.stream.service.Response>specializeCallback(
                                done));
                return;
            case 2:
                this.testStreamResponse(controller, (com.example.test.stream.service.Request) request,
                        com.google.protobuf.RpcUtil.<com.example.test.stream.service.Response>specializeCallback(
                                done));
                return;
            case 3:
                this.testStream(controller, (com.example.test.stream.service.Request) request,
                        com.google.protobuf.RpcUtil.<com.example.test.stream.service.Response>specializeCallback(
                                done));
                return;
            default:
                throw new java.lang.AssertionError("Can't get here.");
        }
    }

    public final com.google.protobuf.Message
    getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
                    "Service.getRequestPrototype() given method " +
                            "descriptor for wrong service type.");
        }
        switch (method.getIndex()) {
            case 0:
                return com.example.test.stream.service.Request.getDefaultInstance();
            case 1:
                return com.example.test.stream.service.Request.getDefaultInstance();
            case 2:
                return com.example.test.stream.service.Request.getDefaultInstance();
            case 3:
                return com.example.test.stream.service.Request.getDefaultInstance();
            default:
                throw new java.lang.AssertionError("Can't get here.");
        }
    }

    public final com.google.protobuf.Message
    getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
                    "Service.getResponsePrototype() given method " +
                            "descriptor for wrong service type.");
        }
        switch (method.getIndex()) {
            case 0:
                return com.example.test.stream.service.Response.getDefaultInstance();
            case 1:
                return com.example.test.stream.service.Response.getDefaultInstance();
            case 2:
                return com.example.test.stream.service.Response.getDefaultInstance();
            case 3:
                return com.example.test.stream.service.Response.getDefaultInstance();
            default:
                throw new java.lang.AssertionError("Can't get here.");
        }
    }

    public interface Interface {
        /**
         * <pre>
         * *
         * 普通流
         * </pre>
         *
         * <code>rpc test(.com.example.test.stream.service.Request) returns (.com.example.test.stream.service.Response);</code>
         */
        public abstract void test(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request,
                com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done);

        /**
         * <pre>
         * *
         * 客户端流
         * </pre>
         *
         * <code>rpc testStreamRequest(stream .com.example.test.stream.service.Request) returns (.com.example.test.stream.service.Response);</code>
         */
        public abstract void testStreamRequest(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request,
                com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done);

        /**
         * <pre>
         * *
         * 服务端流
         * </pre>
         *
         * <code>rpc testStreamResponse(.com.example.test.stream.service.Request) returns (stream .com.example.test.stream.service.Response);</code>
         */
        public abstract void testStreamResponse(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request,
                com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done);

        /**
         * <pre>
         * *
         * 双向流
         * </pre>
         *
         * <code>rpc testStream(stream .com.example.test.stream.service.Request) returns (stream .com.example.test.stream.service.Response);</code>
         */
        public abstract void testStream(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request,
                com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done);

    }

    public interface BlockingInterface {
        public com.example.test.stream.service.Response test(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request)
                throws com.google.protobuf.ServiceException;

        public com.example.test.stream.service.Response testStreamRequest(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request)
                throws com.google.protobuf.ServiceException;

        public com.example.test.stream.service.Response testStreamResponse(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request)
                throws com.google.protobuf.ServiceException;

        public com.example.test.stream.service.Response testStream(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request)
                throws com.google.protobuf.ServiceException;
    }

    public static final class Stub extends com.example.test.stream.service.TestGrpcStream implements Interface {
        private final com.google.protobuf.RpcChannel channel;

        private Stub(com.google.protobuf.RpcChannel channel) {
            this.channel = channel;
        }

        public com.google.protobuf.RpcChannel getChannel() {
            return channel;
        }

        public void test(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request,
                com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(0),
                    controller,
                    request,
                    com.example.test.stream.service.Response.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            com.example.test.stream.service.Response.class,
                            com.example.test.stream.service.Response.getDefaultInstance()));
        }

        public void testStreamRequest(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request,
                com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(1),
                    controller,
                    request,
                    com.example.test.stream.service.Response.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            com.example.test.stream.service.Response.class,
                            com.example.test.stream.service.Response.getDefaultInstance()));
        }

        public void testStreamResponse(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request,
                com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(2),
                    controller,
                    request,
                    com.example.test.stream.service.Response.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            com.example.test.stream.service.Response.class,
                            com.example.test.stream.service.Response.getDefaultInstance()));
        }

        public void testStream(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request,
                com.google.protobuf.RpcCallback<com.example.test.stream.service.Response> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(3),
                    controller,
                    request,
                    com.example.test.stream.service.Response.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            com.example.test.stream.service.Response.class,
                            com.example.test.stream.service.Response.getDefaultInstance()));
        }
    }

    private static final class BlockingStub implements BlockingInterface {
        private final com.google.protobuf.BlockingRpcChannel channel;

        private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
            this.channel = channel;
        }

        public com.example.test.stream.service.Response test(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request)
                throws com.google.protobuf.ServiceException {
            return (com.example.test.stream.service.Response) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(0),
                    controller,
                    request,
                    com.example.test.stream.service.Response.getDefaultInstance());
        }


        public com.example.test.stream.service.Response testStreamRequest(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request)
                throws com.google.protobuf.ServiceException {
            return (com.example.test.stream.service.Response) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(1),
                    controller,
                    request,
                    com.example.test.stream.service.Response.getDefaultInstance());
        }


        public com.example.test.stream.service.Response testStreamResponse(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request)
                throws com.google.protobuf.ServiceException {
            return (com.example.test.stream.service.Response) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(2),
                    controller,
                    request,
                    com.example.test.stream.service.Response.getDefaultInstance());
        }


        public com.example.test.stream.service.Response testStream(
                com.google.protobuf.RpcController controller,
                com.example.test.stream.service.Request request)
                throws com.google.protobuf.ServiceException {
            return (com.example.test.stream.service.Response) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(3),
                    controller,
                    request,
                    com.example.test.stream.service.Response.getDefaultInstance());
        }

    }

    // @@protoc_insertion_point(class_scope:com.example.test.stream.service.TestGrpcStream)
}

